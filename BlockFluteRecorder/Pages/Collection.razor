@page "/collection"
@inject ITrackRepository _db
@inject NavigationManager NavigationManager

<h1> My Collection</h1>

@if (Tracks is null)
{
    <img src="img/loading.gif" />
}
else
{
    <div class="card-columns">
        @foreach (var track in Tracks)
        {
            <TrackCard Track="track" IsSelected="@(IsSelected(track))" DeleteTrack="DeleteTrack" SelectTrack="SelectTrack" />
        }
        <div class="card w-100 text-lg-center text-white bg-success mb-3" @onclick="AddTrack">
            
            <h1>
                <p></p>
                <span class="oi oi-plus " aria-hidden="true"></span>
                <p></p>
            </h1>
            
        </div>
    </div>
}

@code {
    public List<Track> Tracks;

    public Track SelectedTrack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Tracks = await _db.FindAllAsync();
        SelectedTrack = await _db.GetCurrentTrackAsync() ?? await _db.FirstAsync();
    }

    private async Task DeleteTrack(Track track)
    {
        if (track.Equals(SelectedTrack))
        {
            SelectedTrack = await _db.FirstAsync();
            await _db.SetCurrentTrackAsync(SelectedTrack);
        }
        await _db.DeleteAsync(track);
        Tracks.Remove(track);
        StateHasChanged();
    }

    private async Task SelectTrack(Track track)
    {
        await _db.SetCurrentTrackAsync(track);
        SelectedTrack = track;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

    private bool IsSelected(Track track)
    {
        if (track is null)
        {
            return false;
        }
        return track.Equals(SelectedTrack);
    }

    private async Task AddTrack()
    {
        var id = await _db.GetMinimalUnusedKeyAsync();
        var newTrack = new Track { Id = id };
        SelectTrack(newTrack);

    }
}
