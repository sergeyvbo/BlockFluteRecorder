@inject IJSRuntime _js

<div class="card w-100 @style">
    <div class="card-body">
        <div class="container-fluid">
            <div class="row justify-content-start">
                <div class="col">
                    <h2 @onclick="Edit">@(Track.Title)</h2>
                    <h6>Id: @(Track.Id)</h6>
                    <h6>length: @(Track.Notes.Count)</h6>
                </div>
                <div class="col text-right">
                    <div class="btn-group btn-group-lg" role="group">
                        <button type="button" class="btn btn-secondary btn-light" @onclick="Edit">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>

                        <button type="button" class="btn btn-secondary btn-light" @onclick="Delete">
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Track Track { get; set; }
    [Parameter]
    public bool IsSelected { get; set; } = false;
    [Parameter]
    public EventCallback<Track> DeleteTrack { get; set; }

    private string style => IsSelected ? "text-white bg-primary mb-3" : "bg-light mb-3";

    public void Edit()
    {
        IsSelected = !IsSelected;
    }

    public async Task Delete()
    {
        var confirmed = await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {Track.Title}?");
        if (confirmed)
        {
            await DeleteTrack.InvokeAsync(Track);
        }
    }
}
